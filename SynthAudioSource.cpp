/*
  ==============================================================================

    SynthAudioSource.cpp
    Created: 19 Oct 2016 10:19:41pm
    Author:  Adam

  ==============================================================================
*/

#include "SynthAudioSource.h"

#define DEFAULT_FREQ 440;

SynthAudioSource::SynthAudioSource (MidiKeyboardState& keyState) : keyboardState(keyState)
{
    // Add some voices to our synth, to play the sounds..
    nVoices = 4;
    for (int i = nVoices; --i >= 0;)
    {
        synth.addVoice (new FMVoice());
    }
    synth.clearSounds();
    synth.addSound (new FMSound());
    modulatorFreq = DEFAULT_FREQ;
}

void SynthAudioSource::prepareToPlay (int /*samplesPerBlockExpected*/, double sampleRate)
{
    midiCollector.reset (sampleRate);
    synth.setCurrentPlaybackSampleRate (sampleRate);
}

void SynthAudioSource::releaseResources()
{
}

void SynthAudioSource::getNextAudioBlock (const AudioSourceChannelInfo& bufferToFill)
{
    // the synth always adds its output to the audio buffer, so we have to clear it
    // first..
    bufferToFill.clearActiveBufferRegion();

    // fill a midi buffer with incoming messages from the midi input.
    MidiBuffer incomingMidi;
    midiCollector.removeNextBlockOfMessages (incomingMidi, bufferToFill.numSamples);

    for (int i = nVoices; --i >= 0;)
    {
        ((FMVoice*)synth.getVoice(i))->setModulatorFreq(modulatorFreq);
    }
    
    // pass these messages to the keyboard state so that it can update the component
    // to show on-screen which keys are being pressed on the physical midi keyboard.
    // This call will also add midi messages to the buffer which were generated by
    // the mouse-clicking on the on-screen keyboard.
    keyboardState.processNextMidiBuffer (incomingMidi, 0, bufferToFill.numSamples, true);

    // and now get the synth to process the midi events and generate its output.
    synth.renderNextBlock (*bufferToFill.buffer, incomingMidi, 0, bufferToFill.numSamples);
}

void SynthAudioSource::setModulatorFreq(double mf) {
    modulatorFreq = mf;
}

void SynthAudioSource::setIndex(double ind) {
    for (int i = nVoices; --i >= 0;)
    {
        ((FMVoice*)synth.getVoice(i))->setIndex(ind);
    }
}

double SynthAudioSource::getIndex(int i) {
    return ((FMVoice*)synth.getVoice(i))->getIndex();
}